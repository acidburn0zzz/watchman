#!/usr/bin/env bash
# Copyright (c) 2012 fbt <fbt@fleshless.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 	- Redistributions of source code must retain the above copyright notice, 
#		this list of conditions and the following disclaimer.
# 	- Redistributions in binary form must reproduce the above copyright notice,
#		this list of conditions and the following disclaimer in the
#		documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Config
watchman_version='1.5-dev'

# Functions

watchman.usage() {
	cat <<- EOF
		Usage: watchman [flags] <service> <action>
		Flags:
		    -h, --help      Show this message.
		    -V, --version	Show watchman's version.
		    -v, --verbose   Verbose output.
	EOF
}

watchman.msg() { echo "[watchman] $1"; }
watchman.err() { watchman.msg "(error) $1"; }
watchman.debug() {
	[[ "$flag_verbose" ]] && {
		watchman.msg "{v} $1"
	}
}

watchman.init() {
	[[ "$UID" == '0' ]] || { flag_user='1'; }

	[[ "$flag_user" ]] && {
		cfg_dir="${cfg_dir_user:-$HOME/.watchman}"
		cfg_rundir="${cfg_rundir:-/tmp/$USER/watchman/run}"
		cfg_logdir="${cfg_logdir:-$HOME/.local/var/log/watchman}"
	} || {
		cfg_dir="${cfg_dir_system:-/etc/watchman}"
		cfg_rundir="${cfg_rundir:-/run/watchman}"
		cfg_logdir="${cfg_logdir:-/var/log/watchman}"
	}
	
	cfg_initdir="${cfg_dir}/init.d"
	cfg_init_dirs+=( "$cfg_dir"/{init.d,conf.d} "$cfg_rundir" "$cfg_logdir" )
	
	[[ -f "${cfg_dir}/watchman.conf" ]] && {
		source "${cfg_dir}/watchman.conf"
	}

	for i in "${cfg_init_dirs[@]}"; do
		[[ -e "$i" ]] || {
			watchman.debug "$i does not exist, creating..."
			mkdir -p "$i" || {
				watchman.err "Can't create $i!"
			}
		}
	done

	return 0
}

watchman.spawn() { "$service_command" $service_args &>"$service_logfile" & }

watchman.start() {
	watchman.status && {
		watchman.err "$service_name is already running"
		return 7
	}

	[[ "$service_command" ]] || { service_command=`which "$service_name"`; }
	[[ "$service_command" ]] || {
		watchman.err "Please specify what to run with \$service_command"
	}

	[[ "$service_workdir" ]] && { cd "$service_workdir"; }

	>"$service_logfile" 2>/dev/null || {
		watchman.msg "Warning! Logfile is not writeable! Defaulting to /dev/null"
		service_logfile='/dev/null'
	}

	spawn

	case "$service_type" in
		oneshot)
			>"$cfg_rundir/${service_name}.done" || {
				watchman.msg "Warning! Can't mark ${service_name} as enabled."
			}
			watchman.msg "$service_name enabled"
		;;

		*)
			[[ "$service_pidfile" ]] && {
				[[ -f "$service_pidfile" ]] && {
					service_pid=`<${service_pidfile}`

					kill -0 "$service_pid" &>/dev/null || {
						watchman.msg "Waiting to make sure the process had time to wite its pid..."
						sleep 3

						service_pid=`<${service_pidfile}`
					}
				}
			} || {
				service_pid="$!"
			}

			# Exit if the service instantly dies or doesn't start at all
			kill -0 "$service_pid" &>/dev/null || {
				watchman.err "Failed to start $service_name ($?)"
				return 1
			}

			[[ "$service_respawn" == 'true' ]] && {
				watchman.respawn "$service_pid" &
				service_pid="$!"
			}

			echo "$service_pid" > "$service_pidfile_int"
			watchman.msg "$service_name started ($service_pid)"
		;;
	esac
}

watchman.respawn() {
	local job_pid="$1"

	watchman.respawn.exit() {
		service_pid="${job_pid}"
		stop
	}

	trap 'watchman.respawn.exit' EXIT

	while kill -0 "$job_pid"; do
		wait "$job_pid"

		[[ "$?" == '127' ]] && {
			while kill -0 "$job_pid"; do
				sleep "${service_respawn_frequency:-3}"
			done
		}

		spawn

		type -t get_pid &>/dev/null && {
			job_pid="$(get_pid)"
		} || {
			[[ "$service_pidfile" ]] && {
				job_pid=$(<${service_pidfile})
			} || {
				job_pid="$!"
			}
		}

		watchman.msg "Respawned $service_name ($job_pid)"
	done
}

watchman.depends() {
	[[ "$action" == 'start' ]] || { return 0; }

	for s in "$@"; do
		watchman "$s" status >/dev/null || {
			watchman.msg "Starting ${s} as ${service_name} depends on it."
			"$0" "$s" start || {
				watchman.err "Starting $s failed, aborting."
				return 31
			}
		}
	done

	return 0
}

watchman.pid_wait() {
	counter='0'
	echo -n "[watchman] Waiting for PID to exit: ${1}..."

	while [[ "$counter" -lt "$service_stop_timeout" ]] && { kill -0 &>/dev/null "$1"; }; do
		counter=$[counter+1]

		[[ "$counter" -ge "$service_stop_timeout" ]] && {
			echo 'timeout'
			return 23
		}
		
		sleep 1
		echo -n '.'
	done

	echo

	return 0
}

watchman.stop() {
	service_stop_timeout="${service_stop_timeout:-30}"

	watchman.status || {
		watchman.err "$service_name doesn't seem to be running"
		return 21
	}

	case "$service_type" in
		oneshot)
			watchman.msg "Removing $cfg_rundir/${service_name}.done file..."
			rm "$cfg_rundir/${service_name}.done"
		;;

		*)
			kill "$service_pid"

			kill -0 "$service_pid" &>/dev/null && {
				watchman.pid_wait "$service_pid" || {
					watchman.err "Failed to stop $service_name"
					return 23
				}
			}

			for i in "${service_pidfile}" "${service_pidfile_int}"; do
				[[ -e "$i" ]] && {
					rm "$i" || {
						watchman.err "Failed to remove pidfile: $i"
					}
				}
			done
		;;
	esac
}

watchman.status() {
	case "$service_type" in
		oneshot)
			[[ -e "$cfg_rundir/${service_name}.done" ]] && { return 0; }
		;;

		*)
			[[ "$service_pid" ]] && {
				kill -0 "$service_pid" &>/dev/null && { return 0; }
			}
		;;
	esac

	return 25
}

watchman.service_usage() {
	local valid_actions

	for i in ${service_actions[@]}; do
		type -t "$i" &>/dev/null && { valid_actions+="$i|"; }
	done

	watchman.msg "Usage: $service_name <${valid_actions%|*}>"
}

watchman.service_get_pid() {
	local _pid

	type -t get_pid &>/dev/null && {
		_pid="$(get_pid)"
	} || {
		[[ -f "$service_pidfile_int" ]] && {
			_pid="$(<${service_pidfile_int})"
		}

		[[ "$service_pidfile" ]] && {
			[[ -f "$service_pidfile" ]] && {
				_pid="$(<${service_pidfile})"
			}
		}
	}

	echo "$_pid"
}

watchman.reload() {
	watchman.status || {
		watchman.err "$service_name is not running"
		return 1
	}

	watchman.msg "Reloading ${service_name}..."
	kill -1 "$service_pid" 
}

watchman.logs() {
	[[ -e "$service_logfile" ]] && {
		watchman.msg "Output for ${service_name}:"
		while read line; do
			echo "$line"
		done < "$service_logfile"
	}
}

spawn() { watchman.spawn; }

start() { watchman.start; return "$?"; }
stop() { watchman.stop; return "$?"; }
restart() { stop; start; return "$?"; }
reload() { watchman.reload; return "$?"; }
status() {
	local service_status

	watchman.status && {
		service_status='running'
	}

	[[ "$service_status" ]] && {
		[[ "$service_type" == 'oneshot' ]] && {
			watchman.msg "$service_name is enabled"
		} || {
			watchman.msg "$service_name is running ($service_pid)"
		}

		return 0
	} || {
		watchman.msg "$service_name is down"
	}

	return 33
}
logs() { watchman.logs; }

watch() {
	service_respawn='true'
	start
}

depends() { watchman.depends "$@"; }

watchman.main() {
	local rcode='0'

	# Parse arguments
	while [[ "$1" ]]; do
		case "$1" in
			-h|--help) watchman.usage; exit;;
			-v|--verbose) flag_verbose='1';;
			-V|--version) watchman.msg "$watchman_version"; exit;;

			--) shift; break;;

			-*)
				watchman.err "Invalid key: $1"
				watchman.usage
				return 1
			;;

			*) break;;
		esac
		shift
	done

	watchman.init "$@" || { return "$?"; }

	[[ "$1" ]] || {
		watchman.usage
		return 9
	}

	service_name="${1##*/}"
	service_logfile="$cfg_logdir/${service_name}.log"
	service_pidfile_int="$cfg_rundir/${service_name}.pid"

	action="$2"

	[[ "$service_actions" ]] || { service_actions=( 'start' 'stop' 'restart' 'reload' 'status' ); }

	[[ -f "${cfg_initdir}/${service_name}" ]] && { service_script="${cfg_initdir}/${service_name}"; }
	[[ -f "$1" ]] && { service_script="$1"; }

	[[ "$service_script" ]] || {
		watchman.err "$service_name doesn't exist in $cfg_initdir"
		return 11
	}

	source "$service_script" || { return 13; }

	[[ -f "${cfg_dir}/conf.d/${service_name}.sh" ]] && {
		source "${cfg_dir}/conf.d/${service_name}.sh"
	}

	[[ "$action" ]] || { watchman.service_usage; return 27; }

	service_pid="$(watchman.service_get_pid)"

	type -t "$action" &>/dev/null && {
		"$action" || { return "$?"; }
	} || {
		watchman.err "Function $action is not defined for $service_name"
		return 17
	}

	return "$rcode"
}

# Main
watchman.main "$@"
exit "$?"
